import time, timeit
import numpy as np





def convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test,type="X"):
    b_tilt = np.array((360 - tilt_match) * 10).T
    b_pan = np.array(pan_match).T
    B= np.concatenate((b_tilt.reshape(b_tilt.shape[0],1),b_pan.reshape(b_pan.shape[0],1)),axis=1)

    B2 = np.full(shape=(B.shape[0], 14), fill_value=0.0)
    B2[:, 0] = np.power(B[:, 0], 4)  # t4
    B2[:, 1] = np.power(B[:, 1], 4)  # p4
    B2[:, 2] = np.power(B[:, 0], 3) * B[:, 1]  # t3p
    B2[:, 3] = np.power(B[:, 1], 3) * B[:, 0]  # p3t
    B2[:, 4] = np.power(B[:, 0], 2) * np.power(B[:, 1], 2)  # t2p2

    B2[:, 5] = np.power(B[:, 0], 3)  # t3
    B2[:, 6] = np.power(B[:, 1], 3)  # p3
    B2[:, 7] = np.power(B[:, 0], 2) * B[:, 1]  # t2p
    B2[:, 8] = np.power(B[:, 1], 2) * B[:, 0]  # p2t

    B2[:, 9] = np.power(B[:, 0], 2)  # t2
    B2[:, 10] = np.power(B[:, 1], 2)  # p2
    B2[:, 11] = B[:, 0] * B[:, 1]  # tp

    B2[:, 12] = B[:, 0]  # t
    B2[:, 13] = B[:, 1]  # p

    A = np.full(shape=xyz_match.shape, fill_value=0.0)
    A[:, 0] = (xyz_match[:, 0] - camera_gps[0]) * 111300
    A[:, 1] = (xyz_match[:, 1] - camera_gps[1]) * 111300
    A[:, 2] = xyz_match[:, 2]
    # print(A)
    # print(A.shape)

    if type=="X":
        regression_x = np.linalg.lstsq(B2, A[:, 0], rcond=None)
        # print("regression result:",regression)
    elif type=="Y":
        regression_y = np.linalg.lstsq(B2, A[:, 1], rcond=None)
    elif type=="Z":
        regression_z = np.linalg.lstsq(B2, A[:, 2], rcond=None)

    c_tilt = np.array((360 - tilt_test) * 10).T
    c_pan = np.array(pan_test).T
    C = np.concatenate((c_tilt.reshape(c_tilt.shape[0],1), c_pan.reshape(c_pan.shape[0],1)),axis=1)

    D = xyz_test
    E = np.full(shape=xyz_test.shape, fill_value=0.0)
    E[:, 0] = (xyz_test[:, 0] - camera_gps[0]) * 111300
    E[:, 1] = (xyz_test[:, 1] - camera_gps[1]) * 111300
    E[:, 2] = xyz_test[:, 2]

    if type == "X":
        predict_x = regression_x[0][0] * C[:, 0] ** 4 + regression_x[0][1] * C[:, 1] ** 4 + \
                    regression_x[0][2] * C[:, 0] ** 3 * C[:, 1] + regression_x[0][3] * C[:, 0]  * C[:, 1] ** 3 + \
                    regression_x[0][4] * C[:, 0] ** 2 * C[:, 1]**2+ \
                    regression_x[0][5] * C[:, 0] ** 3+ regression_x[0][6] * C[:, 1] ** 3 + \
                    regression_x[0][7] * C[:, 0] ** 2 * C[:, 1]  + \
                    regression_x[0][8] * C[:, 0] * C[:, 1] ** 2 + \
                    regression_x[0][9] * C[:, 0] ** 2 + \
                    regression_x[0][10] * C[:, 1] ** 2 + \
                    regression_x[0][11] * C[:, 0] * C[:, 1] + \
                    regression_x[0][12] * C[:, 0] + \
                    regression_x[0][13] *  C[:, 1]
        print("real global x result", np.round(D[:, 0], 5))
        print("predict global x:",np.round(predict_x/111300+camera_gps[0],5))
        print("real plant x result", np.round(E[:, 0], 2))
        print("predict plant x:", np.round(predict_x , 2))
    elif type == "Y":
        predict_y = regression_y[0][0] * C[:, 0] ** 4 + regression_y[0][1] * C[:, 1] ** 4 + \
                    regression_y[0][2] * C[:, 0] ** 3 * C[:, 1] + regression_y[0][3] * C[:, 0]  * C[:, 1] ** 3 + \
                    regression_y[0][4] * C[:, 0] ** 2 * C[:, 1]**2+ \
                    regression_y[0][5] * C[:, 0] ** 3+ regression_y[0][6] * C[:, 1] ** 3 + \
                    regression_y[0][7] * C[:, 0] ** 2 * C[:, 1]  + \
                    regression_y[0][8] * C[:, 0] * C[:, 1] ** 2 + \
                    regression_y[0][9] * C[:, 0] ** 2 + \
                    regression_y[0][10] * C[:, 1] ** 2 + \
                    regression_y[0][11] * C[:, 0] * C[:, 1] + \
                    regression_y[0][12] * C[:, 0] + \
                    regression_y[0][13] *  C[:, 1]
        print("real global y result", np.round(D[:, 1], 5))
        print("predict global y:", np.round(predict_y / 111300 + camera_gps[1],5))
        print("real plant y result", np.round(E[:, 1], 2))
        print("predict plant y:", np.round(predict_y, 2))
    elif type == "Z":
        predict_z = regression_z[0][0] * C[:, 0] ** 4 + regression_z[0][1] * C[:, 1] ** 4 + \
                    regression_z[0][2] * C[:, 0] ** 3 * C[:, 1] + regression_z[0][3] * C[:, 0] * C[:, 1] ** 3 + \
                    regression_z[0][4] * C[:, 0] ** 2 * C[:, 1] ** 2 + \
                    regression_z[0][5] * C[:, 0] ** 3 + regression_z[0][6] * C[:, 1] ** 3 + \
                    regression_z[0][7] * C[:, 0] ** 2 * C[:, 1] + \
                    regression_z[0][8] * C[:, 0] * C[:, 1] ** 2 + \
                    regression_z[0][9] * C[:, 0] ** 2 + \
                    regression_z[0][10] * C[:, 1] ** 2 + \
                    regression_z[0][11] * C[:, 0] * C[:, 1] + \
                    regression_z[0][12] * C[:, 0] + \
                    regression_z[0][13] * C[:, 1]
        print("real global z result", np.round(D[:, 2], 2))
        print("predict global z:", np.round(predict_z,2) )
        print("real plant z result", np.round(E[:, 2], 2))
        print("predict plant z:", np.round(predict_z, 2))





def test21():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0],
         [119.08366374671459, 31.92131105393831, 11.7], [119.08090308308601, 31.921898981985507, 7.4],
         [119.089095890522, 31.924460096136755, 21.2],
         [119.0862675011158, 31.925464033424674, 14.8],[119.08976912498474, 31.923209996773011, 25.1]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727, 297.100004427135, 302.4, 38.200000569224358,3.7000000476837158, 58.700000762939453])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0, 350.69999980926514, 352.7, 353.0,352.79999971389771,352.69999980926514])
    xyz_test = np.array([[119.08519059419632, 31.92133552730082, 17.0],
                         [119.08897116780281, 31.920046967452627, 26.0],
                         [119.08614948391914, 31.925492489537277, 14.8],
                         [119.0901305526495, 31.919807921679435, 25.0],
                         [119.08984422683716, 31.919694090140503, 27.2],
                         [119.09097108989954, 31.917447880482449, 23.3],
                         [119.08886186778545, 31.921000298582968, 28.0],
                         [119.09012719988823, 31.92184662068555, 28.6]])
    pan_test = np.array([297.70000443607569, 185.5000027641654,2.5,162.19999694824219,169.5,177.40000915527344,153.30000305175781,97.0999984741211])
    tilt_test = np.array([348.09999942779541, 349.19999980926514,352.79999971389771,354.69999980926514,354.5,358.5,331.5,351.19999980926514])
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="X")
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="Y")
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="Z")


def test19():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0],
         [119.08366374671459, 31.92131105393831, 11.7], [119.08090308308601, 31.921898981985507, 7.4],
         [119.089095890522, 31.924460096136755, 21.2]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727, 297.100004427135, 302.4, 38.200000569224358])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0, 350.69999980926514, 352.7, 353.0])
    xyz_test = np.array([[119.08519059419632, 31.92133552730082, 17.0],
                         [119.08897116780281, 31.920046967452627, 26.0]])
    pan_test = np.array([297.70000443607569, 185.5000027641654])
    tilt_test = np.array([348.09999942779541, 349.19999980926514])
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")


def test16():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0])
    xyz_test = np.array([
        [119.08366374671459, 31.92131105393831, 11.7],
        [119.08090308308601, 31.921898981985507, 7.4],
        [119.089095890522, 31.924460096136755, 21.2],
        [119.08519059419632, 31.92133552730082, 17.0],
        [119.08897116780281, 31.920046967452627, 26.0]])
    pan_test = np.array([297.100004427135, 302.4, 38.200000569224358,297.70000443607569, 185.5000027641654])
    tilt_test = np.array([350.69999980926514, 352.7, 353.0,348.09999942779541, 349.19999980926514])
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    convert_pan_tilt_to_location(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")


if __name__ == '__main__':
    print("21组标定点，8组测试点结果")
    test21()
    # print("19组标定点，2组测试点结果")
    # test19()
    # print("16组标定点，5组测试点结果")
    # test16()