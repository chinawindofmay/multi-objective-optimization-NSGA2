import time, timeit
import numpy as np


def slove_matrix_test():
    A = np.mat('1,2,9; 1,4,10; 3,9,10; 2,3,10; 5,4,8')
    print(A)
    b = np.array([[3, 6,4,8,7]]).T
    print(b)
    # r = np.linalg.solve(A, b)
    r = np.linalg.lstsq(A, b, rcond=None)
    print(r)


def slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P"):
    A=np.full(shape=xyz_match.shape,fill_value=0.0)
    A[:, 0]= (xyz_match[:, 0] - camera_gps[0]) * 111300
    A[:, 1]= (xyz_match[:, 1] - camera_gps[1]) * 111300
    A[:, 2]= xyz_match[:, 2]
    # print(A)
    # print(A.shape)
    if type=="T":
        b = np.array((360 - tilt_match) * 10).T
    elif type=="P":
        b = np.array(pan_match).T
    # print(b)
    # print(b.shape)
    A2 = np.full(shape=(A.shape[0], 13), fill_value=0.0)
    A2[:, 0] = np.power(A[:, 0], 3)  # x3
    A2[:, 1] = np.power(A[:, 1], 3)  # y3
    A2[:, 2] = np.power(A[:, 2], 3)  # z3

    A2[:, 3] = np.power(A[:, 0], 2) * A[:, 1]  # x2y
    A2[:, 4] = np.power(A[:, 0], 2) * A[:, 2]  # x2z

    A2[:, 5] = np.power(A[:, 1], 2) * A[:, 2]  # y2z
    A2[:, 6] = np.power(A[:, 1], 2) * A[:, 0]  # y2x

    A2[:, 7] = np.power(A[:, 2], 2) * A[:, 0]  # z2x
    A2[:, 8] = np.power(A[:, 2], 2) * A[:, 1]  # z2y

    A2[:, 9] = A[:, 0] * A[:, 1] * A[:, 2]  # xyz

    A2[:, 10] = A[:, 0]  # x
    A2[:, 11] = A[:, 1]  # y
    A2[:, 12] = A[:, 2]  # z

    regression = np.linalg.lstsq(A2, b, rcond=None)
    # print("regression result:",regression)

    B = np.full(shape=xyz_test.shape, fill_value=0.0)
    B[:, 0] = (xyz_test[:, 0] - camera_gps[0]) * 111300
    B[:, 1] = (xyz_test[:, 1] - camera_gps[1]) * 111300
    B[:, 2] = xyz_test[:, 2]
    predict = regression[0][0] * B[:, 0] ** 3 + regression[0][1] * B[:, 1] ** 3 + regression[0][2] * B[:, 2] ** 3 + \
              regression[0][3] * B[:, 0] ** 2 * B[:, 1] + regression[0][4] * B[:, 0] ** 2 * B[:, 2] + \
              regression[0][5] * B[:, 1] ** 2 * B[:, 2] + regression[0][6] * B[:, 1] ** 2 * B[:, 0] + \
              regression[0][7] * B[:, 2] ** 2 * B[:, 0] + regression[0][8] * B[:, 2] ** 2 * B[:, 1] + \
              regression[0][9] * B[:, 0] * B[:, 1] * B[:, 2] + \
              regression[0][10] * B[:, 0] + \
              regression[0][11] * B[:, 1] + \
              regression[0][12] * B[:, 2]
    if type=="P":
        print("real pan result", np.round(pan_test,2))
        print("predict pan result",np.round(predict,2))
    elif type=="T":
        print("real tilt result", np.round(tilt_test,2))
        print("predict tilt result",np.round(360-predict/10,2))



def slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P"):
    A=np.full(shape=xyz_match.shape,fill_value=0.0)
    A[:, 0]= (xyz_match[:, 0] - camera_gps[0]) * 111300
    A[:, 1]= (xyz_match[:, 1] - camera_gps[1]) * 111300
    A[:, 2]= xyz_match[:, 2]
    # print(A)
    # print(A.shape)
    if type=="T":
        b = np.array((360 - tilt_match) * 10).T
    elif type=="P":
        b = np.array(pan_match).T
    # print(b)
    # print(b.shape)

    regression = np.linalg.lstsq(A, b, rcond=None)
    # print("regression result:",regression)

    B = np.full(shape=xyz_test.shape, fill_value=0.0)
    B[:, 0] = (xyz_test[:, 0] - camera_gps[0]) * 111300
    B[:, 1] = (xyz_test[:, 1] - camera_gps[1]) * 111300
    B[:, 2] = xyz_test[:, 2]
    predict = regression[0][0] * B[:, 0]  + regression[0][1] * B[:, 1]  + regression[0][2] * B[:, 2]
    if type=="P":
        print("real pan result", pan_test)
        print("predict pan result",predict)
    elif type=="T":
        print("real tilt result", tilt_test)
        print("predict tilt result",360-predict/10)



def test21():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0],
         [119.08366374671459, 31.92131105393831, 11.7], [119.08090308308601, 31.921898981985507, 7.4],
         [119.089095890522, 31.924460096136755, 21.2],
         [119.0862675011158, 31.925464033424674, 14.8],[119.08976912498474, 31.923209996773011, 25.1]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727, 297.100004427135, 302.4, 38.200000569224358,3.7000000476837158, 58.700000762939453])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0, 350.69999980926514, 352.7, 353.0,352.79999971389771,352.69999980926514])
    xyz_test = np.array([[119.08519059419632, 31.92133552730082, 17.0],
                         [119.08897116780281, 31.920046967452627, 26.0],
                         [119.08614948391914, 31.925492489537277, 14.8],
                         [119.0901305526495, 31.919807921679435, 25.0],
                         [119.08984422683716, 31.919694090140503, 27.2],
                         [119.09097108989954, 31.917447880482449, 23.3],
                         [119.08886186778545, 31.921000298582968, 28.0],
                         [119.09012719988823, 31.92184662068555, 28.6]])
    pan_test = np.array([297.70000443607569, 185.5000027641654,2.5,162.19999694824219,169.5,177.40000915527344,153.30000305175781,97.0999984741211])
    tilt_test = np.array([348.09999942779541, 349.19999980926514,352.79999971389771,354.69999980926514,354.5,358.5,331.5,351.19999980926514])
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")


def test19():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0],
         [119.08366374671459, 31.92131105393831, 11.7], [119.08090308308601, 31.921898981985507, 7.4],
         [119.089095890522, 31.924460096136755, 21.2]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727, 297.100004427135, 302.4, 38.200000569224358])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0, 350.69999980926514, 352.7, 353.0])
    xyz_test = np.array([[119.08519059419632, 31.92133552730082, 17.0],
                         [119.08897116780281, 31.920046967452627, 26.0]])
    pan_test = np.array([297.70000443607569, 185.5000027641654])
    tilt_test = np.array([348.09999942779541, 349.19999980926514])
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")


def test16():
    # slove_matrix_test()
    camera_gps = np.array([119.088314, 31.921308])
    xyz_match = np.array(
        [[119.08954784274101, 31.923024173586704, 25.4], [119.08974163234234, 31.923085071272574, 25.1],
         [119.09100294113159, 31.922237053139384, 22.3], [119.09130401909351, 31.921339511335965, 22.6],
         [119.09147165715694, 31.920691249633293, 22.6], [119.09159436821938, 31.920448221460987, 23.4],
         [119.09130871295929, 31.92015055376141, 23.3], [119.09101366996765, 31.92006916452862, 24.4],
         [119.09069985151291, 31.919992328473526, 25.7], [119.09394800662994, 31.917385556133283, 17.3],
         [119.08967457711697, 31.91927063557891, 30.9], [119.08886052668095, 31.919334950711807, 27.3],
         [119.0853314101696, 31.91988646535915, 17.1], [119.08516645431519, 31.920262108117328, 16.4],
         [119.0942832827568, 31.91764509835025, 16.5], [119.08817857503891, 31.92662162097826, 20.0]])
    pan_match = np.array(
        [57.000000849366188, 59.900000892579556, 94.500001408159733, 115.90000172704458, 130.3000019416213,
         134.6000020056963, 141.80000211298466, 145.8000021725893, 150.700002245605, 156.80000233650208,
         178.80000266432762, 195.60000291466713, 268.40000399947166, 276.30000411719084, 153.300002284348,
         25.600000381469727])
    tilt_match = np.array(
        [351.19999980926514, 352.09999990463257, 354.40000009536743, 355.19999980926514, 356.29999995231628,
         356.70000004768372, 356.39999985694885, 355.90000009536743, 355.40000009536743, 359.79999999701977,
         355.69999980926514, 353.09999990463257, 350.39999961853027, 349.80000019073486, 359.79999999701977,
         355.0])
    xyz_test = np.array([
        [119.08366374671459, 31.92131105393831, 11.7],
        [119.08090308308601, 31.921898981985507, 7.4],
        [119.089095890522, 31.924460096136755, 21.2],
        [119.08519059419632, 31.92133552730082, 17.0],
        [119.08897116780281, 31.920046967452627, 26.0]])
    pan_test = np.array([297.100004427135, 302.4, 38.200000569224358,297.70000443607569, 185.5000027641654])
    tilt_test = np.array([350.69999980926514, 352.7, 353.0,348.09999942779541, 349.19999980926514])
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    slove_matrix_camera_13(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="T")
    # slove_matrix_camera_6(camera_gps, xyz_match, pan_match, tilt_match, pan_test, tilt_test, xyz_test, type="P")


if __name__ == '__main__':
    print("21组标定点，8组测试点结果")
    test21()
    # print("19组标定点，2组测试点结果")
    # test19()
    # print("16组标定点，5组测试点结果")
    # test16()